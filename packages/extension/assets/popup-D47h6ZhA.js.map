{"version":3,"file":"popup-D47h6ZhA.js","sources":["../../src/popup/popup.tsx"],"sourcesContent":["/// <reference types=\"chrome\"/>\n\n// Define types for our messages and responses\ninterface ClipResponse {\n  success: boolean;\n  error?: string;\n  data?: {\n    raw_query: string;\n    answer_markdown: string;\n  };\n}\n\ninterface ApiResponse {\n  id: string;\n  sonar_status: string;\n  sonar_data?: {\n    error?: string;\n  };\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  const clipButton = document.getElementById('clipButton') as HTMLButtonElement;\n  const openSidepanelButton = document.getElementById('openSidepanelButton') as HTMLButtonElement;\n  const statusText = document.getElementById('status') as HTMLSpanElement;\n  const statusIcon = document.getElementById('statusIcon') as HTMLDivElement;\n\n  // Add null checks for DOM elements\n  if (!clipButton || !openSidepanelButton || !statusText || !statusIcon) {\n    console.error('Required DOM elements not found');\n    return;\n  }\n\n  // Cache DOM elements and create document fragment for button content\n  const buttonContent = {\n    loading: document.createRange().createContextualFragment(`\n      <svg class=\"animate-spin\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n        <circle cx=\"12\" cy=\"12\" r=\"10\" stroke-dasharray=\"32\" stroke-dashoffset=\"16\"></circle>\n      </svg>\n      Clipping...\n    `),\n    default: document.createRange().createContextualFragment(`\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n        <path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path>\n        <rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect>\n      </svg>\n      Clip Current Page\n    `)\n  };\n\n  function updateStatus(message: string, type: 'ready' | 'error' = 'ready'): void {\n    // Batch DOM updates\n    requestAnimationFrame(() => {\n      statusText.textContent = message;\n      statusIcon.className = `status-icon ${type}`;\n    });\n  }\n\n  function setLoading(isLoading: boolean): void {\n    // Batch DOM updates\n    requestAnimationFrame(() => {\n      clipButton.disabled = isLoading;\n      clipButton.innerHTML = '';\n      clipButton.appendChild(isLoading ? buttonContent.loading.cloneNode(true) : buttonContent.default.cloneNode(true));\n    });\n  }\n\n  clipButton.addEventListener('click', async () => {\n    try {\n      setLoading(true);\n      updateStatus('Clipping content...', 'ready');\n\n      // Send message to content script\n      const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });\n      if (!tab?.id) {\n        throw new Error('No active tab found');\n      }\n\n      const response = await chrome.tabs.sendMessage(tab.id, { type: 'CLIP_CONTENT' }) as ClipResponse;\n\n      if (!response || !response.success) {\n        throw new Error(response?.error || 'Failed to clip content');\n      }\n\n      // Validate the response data\n      if (!response.data?.raw_query || !response.data?.answer_markdown) {\n        throw new Error('Invalid content format');\n      }\n\n      // Send to backend API\n      const apiResponse = await fetch('http://localhost:8000/queries', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(response.data)\n      });\n\n      if (!apiResponse.ok) {\n        const error = await apiResponse.json();\n        throw new Error(error.detail || 'API request failed');\n      }\n\n      const result = await apiResponse.json() as ApiResponse;\n      \n      // Check if the query was stored and processed successfully\n      if (result.id && result.sonar_status) {\n        updateStatus('Content clipped successfully!', 'ready');\n        // Optionally show different status based on sonar_status\n        if (result.sonar_status === 'error') {\n          console.warn('Sonar processing failed:', result.sonar_data?.error);\n        }\n      } else {\n        throw new Error('Invalid API response format');\n      }\n\n    } catch (error) {\n      console.error('Error:', error);\n      updateStatus(error instanceof Error ? error.message : 'Failed to clip content', 'error');\n    } finally {\n      setLoading(false);\n    }\n  });\n\n  openSidepanelButton.addEventListener('click', async () => {\n    if (chrome.sidePanel) {\n      await chrome.sidePanel.open({ windowId: chrome.windows.WINDOW_ID_CURRENT });\n    } else {\n      // Fallback for browsers that don't support side panel\n      chrome.windows.create({\n        url: 'sidepanel.html',\n        type: 'popup',\n        width: 400,\n        height: 600\n      });\n    }\n  });\n\n  // Check if we're on a valid page\n  chrome.tabs.query({ active: true, currentWindow: true }, async (tabs) => {\n    const currentUrl = tabs[0]?.url;\n    if (!currentUrl?.includes('perplexity.ai')) {\n      clipButton.disabled = true;\n      updateStatus('Please navigate to Perplexity AI', 'error');\n    }\n  });\n}); "],"names":["clipButton","openSidepanelButton","statusText","statusIcon","buttonContent","updateStatus","message","type","setLoading","isLoading","tab","response","_a","_b","apiResponse","error","result","_c","tabs","currentUrl"],"mappings":"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"}